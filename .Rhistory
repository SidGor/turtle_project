higher_tail <- returns[((test_h) %*% c(1,1)) ==2,]
rbind(higher_tail,lower_tail)
tails <- rbind(higher_tail,lower_tail)
corr_high <- corr(higher_tail[,1],higher_tail[,2])
?corr
??corr
?cor
corr_high <- cor(higher_tail[,1],higher_tail[,2])
corr_high
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
corr_tails <- cor(tails[,1], tails[,2])
corr_low
corr_high
corr_tails
# Exceedence Correlation Calculation
#
# Sida.Li
#
# Download data via quantex
#prep
library(quantex)
library(data.table)
product_ids          <- c("cu","al")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta1
data                 <- list()
#Data Download#################################################################
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
returns <- cbind(data[[1]][,na.omit(return)],data[[2]][,na.omit(return)])
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- returns[((test_h) %*% c(1,1)) ==2,]
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
#plot the returns as well
higher_tail
lower_tail
# Exceedence Correlation Calculation
#
# Sida.Li
#
# Download data via quantex
#prep
library(quantex)
library(data.table)
product_ids          <- c("ag","au")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta1
data                 <- list()
#Data Download#################################################################
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
returns <- cbind(data[[1]][,na.omit(return)],data[[2]][,na.omit(return)])
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- returns[((test_h) %*% c(1,1)) ==2,]
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
#plot the returns as well
higher_tail
lower_tail
tails
data
?left_join
??left_join
??left_join
library(dplyr)
returns <- left_join(data[[1]][,na.omit(return)],data[[2]][,na.omit(return)])
data[1]
data[1][return]
data[[1]][return()]
data[[1]][return]
data[[1]][,return]
data[1][,return]
returns <- left_join(data[[1]][,na.omit(return)],data[[2]][,na.omit(return)], by = "date")
?left_join
data[[1]]
joint_table <- left_join(data[[1]], data[[2]], by = date)
joint_table <- left_join(data[[1]], data[[2]], by = "date")
joint_table
returns <- joint_table[,.(return.x,return.y)]
returns <- joint_table[,.SD(return.x,return.y)]
returns <- joint_table[,4&7]
returns
returns <- joint_table[[,4&7]]
returns <- joint_table[,return.x&return.y]
joint_table[,return.x]
joint_table[, return]
joint_table
joint_table[,4]
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7])
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- returns[((test_h) %*% c(1,1)) ==2,]
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
returns
head(joint_table)
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- returns[((test_h) %*% c(1,1)) ==2,]
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
higher_tail
lower_tail
corr_high
corr_high <- na.omit(cor(higher_tail[,1], higher_tail[,2]))
corr_low  <- na.omit(cor(lower_tail[,1], lower_tail[,2]))
corr_tails <- na.omit(cor(tails[,1], tails[,2]))
corr_high
corr_high <- cor(na.omit(higher_tail[,1], higher_tail[,2]))
higher_tail[,1]
higher_tail[,2]
corr_high <- cor((higher_tail[,1], higher_tail[,2]),na.rm= TRUE)
corr_high <- cor(higher_tail[,1], higher_tail[,2],na.rm= TRUE)
corr_high <- cor(higher_tail[,1], higher_tail[,2], na.exclude()= TRUE)
lower_tail <- na.exclude(returns[(test_l %*% c(1,1)) ==2,]) #取出同时小于theta的几个组合
lower_tail
higher_tail
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2], na.exclude()= TRUE)
corr_low  <- cor(lower_tail[,1], lower_tail[,2],na.exclude = TRUE)
corr_tails <- (cor(tails[,1], tails[,2],na.exclude = TRUE)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
corr_high
corr_low
corr_tails
corr_high+corr_low
data[[1]]
data[[2]]
joint_table <- left_join(data[[2]], data[[1]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- na.exclude(returns[(test_l %*% c(1,1)) ==2,]) #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
higher_tail
lower_tail
rm(list=ls())
# Exceedence Correlation Calculation
#
# Sida.Li
#
# Download data via quantex
#prep
library(quantex)
library(data.table)
library(dpylr)
product_ids          <- c("ag","au")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta1
data                 <- list()
#Data Download#################################################################
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
joint_table <- left_join(data[[2]], data[[1]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- na.exclude(returns[(test_l %*% c(1,1)) ==2,]) #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
#plot the returns as well
theta_h              <- theta_l
theta_h              <- theta_l
joint_table <- left_join(data[[2]], data[[1]], by = "date")
library(quantex)
library(data.table)
library(dpylr)
product_ids          <- c("ag","au")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta_l
data                 <- list()
joint_table <- left_join(data[[2]], data[[1]], by = "date")
library(dplyr)
joint_table <- left_join(data[[2]], data[[1]], by = "date")
library(quantex)
library(data.table)
library(dplyr)
product_ids          <- c("ag","au")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta_l
data                 <- list()
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
joint_table <- left_join(data[[2]], data[[1]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- na.exclude(returns[(test_l %*% c(1,1)) ==2,]) #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
higher_tail
lower_tail
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
lower_tail
joint_table
data[1]
data[2]
product_ids          <- c("au","ag")
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
joint_table <- left_join(data[[1]], data[[2]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
corr_high
corr_low
returns
data[[2]]
data[[1]]
rm(list=ls())
library(quantex)
library(data.table)
library(dplyr)
product_ids          <- c("au","ag")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta_l
data                 <- list()
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
data[[2]]
data[[1]]
data[[2]]
outer_join
?outer_join
data[[1]][data[[2]],]
a <- data.table(a=c(1,2,3),b=c(3,4,5))
b <- data.table(a=c(1,2),k=c(1,2))
merge(a,b,by="a",all.x=T)
merge(data[[1]],data[[2]],by="date")
merge(data[[2]],data[[1]],by="date")
joint_table <- merge(data[[1]], data[[2]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
returns
valid_line <- nrow(returns)
valid_line <- na.exclude(nrow(returns))
valid_line
valid_line <- na.omit(nrow(returns))
valid_line
valid_line <- nrow(!is.na(returns))
valid_line
!is.na(returns)
valid_line <- nrow(!any.na(returns))
!is.na(returns)[,1] * !is.na(returns)[,2]
!is.na(returns)[,1]
!is.na(returns)[,2]
!is.na(returns)[,1] * !is.na(returns)[,2]
FALSE + 1
FALSE * TRUE
!is.na(returns)[,1] * !is.na(returns)[,2]
!is.na(returns)[,1] + !is.na(returns)[,2]
is.na(returns)[,1] + is.na(returns)[,2]
!(is.na(returns)[,1] + is.na(returns)[,2])
returns[!(is.na(returns)[,1] + is.na(returns)[,2]),]
valid_line <- nrow(returns)
returns <- returns[!(is.na(returns)[,1] + is.na(returns)[,2]),]
returns[,1] < -theta_l
sum(returns[,1] < -theta_l)
sum(returns[,2] < -theta_l)
rm(list=ls())
# Exceedence Correlation Calculation
#
# Sida.Li
#
# Download data via quantex
#prep
library(quantex)
library(data.table)
library(dplyr)
product_ids          <- c("cn","zg")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta_l
data                 <- list()
#Data Download#################################################################
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
joint_table <- merge(data[[1]], data[[2]], by = "date")
returns <- cbind(joint_table[, 4],cbind(joint_table[, 7]))
returns <- returns[!(is.na(returns)[,1] + is.na(returns)[,2]),]
valid_line <- nrow(returns)
lower_save <- returns + theta_l     #所有跌幅小于theta的数据都会>0
test_l <- lower_save < 0
lower_tail <- returns[(test_l %*% c(1,1)) ==2,] #取出同时小于theta的几个组合
higher_save <- returns - theta_h  #涨幅大于theta_h 的会大于0
test_h <- higher_save > 0
higher_tail <- na.exclude(returns[((test_h) %*% c(1,1)) ==2,])
tails <- rbind(higher_tail,lower_tail)
corr_high <- cor(higher_tail[,1], higher_tail[,2])
corr_low  <- cor(lower_tail[,1], lower_tail[,2])
corr_tails <- cor(tails[,1], tails[,2])
#plot the returns as well
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
library(quantex)
library(data.table)
library(dplyr)
product_ids          <- c("cn","zg")
start_date           <- 20100101
end_date             <- 20161230
frequency            <- "day"
theta_l              <- 0.02
theta_h              <- theta_l
data                 <- list()
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
product_ids
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
}
data[1]
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
}
data[2]
data[1]
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
#简化数据↓
data[[i]] <- na.omit(data[[i]][, .(date = trading_day,
code = instrument_id, open, high, low, close, volume)])
#跳过了所有有NA的数据，下面合并的时候可能会重新出现NA值（因为用了left_join）
#变更产品名
data[[i]][,code := product_ids[i]]
#计算N*DPP
data[[i]][, TR := pmax(high-low,
high-shift(close,1,type = "lag"),
shift(close,1,type = "lag")-low)]   #使用pmax()算true range
s <- mean(data[[i]][2:21,TR])         #ATR的第一个数是需要取TR平均值计算的
v <- rep(NA,nrow(data[[i]]))
k <- data[[i]][,TR]
v[1:20] = NA
v[21] = s
for (j in 1:(nrow(data[[i]])-21)){
v[21+j] = (v[21+j-1]*19+k[21+j])/20
}
data[[i]][, ATR := shift(v,1,type="lag")]
#↑除了计算ATR之外，还lag了一个单位以避免未来数据
#(这样做后面可以用NA直接跳过不用交易的日期，否则开仓算法容易报错)
data[[i]][, NxDPP := vm[i]*ATR]   #这个就是待除的N*DPP，本来想合并三个公式，
#但那样的可读性会极其差，放弃了。
#添加 10日及20日收盘最高最低线（一共有4条）
data[[i]][, max10high := shift(rollapplyr(high, width = 10, FUN = max,
fill = NA ), 1, type = "lag")]
data[[i]][, min10low := shift(rollapplyr(low, width = 10, FUN = min,
fill = NA ), 1, type = "lag")]
data[[i]][, max20high := shift(rollapplyr(high, width = 20, FUN = max,
fill = NA ), 1, type = "lag")]
data[[i]][, min20low := shift(rollapplyr(low, width = 20, FUN = min,
fill = NA ), 1, type = "lag")]
#添加55日收盘价最高最低线(两条)（system2）
data[[i]][, max55high := shift(rollapplyr(high, width = 55, FUN = max,
fill = NA ), 1, type = "lag")]
data[[i]][, min55low := shift(rollapplyr(low, width = 55, FUN = min,
fill = NA ), 1, type = "lag")]
}#end of product data downloading loop
for (i in 1:length(product_ids)) {
#下载数据↓
data[[i]] <- query_dominant_future_bars(product_id = product_ids[i],
trading_day = start_date ~ end_date,
type = frequency)
data[[i]] <- na.omit(data[[i]][, .(date = trading_day, code = product_ids[i], close)])
data[[i]][,return := c(NA,diff(data[[i]][,close]))/data[[i]][,shift(close,1,type = "lag")]]
}
